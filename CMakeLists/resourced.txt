CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

#CMake doesnt' support same project name for several TARGETS
# libresourced uses it
PROJECT(resource_d)

SET(CMAKE_EXTRA_INCLUDE_FILES unistd.h)

INCLUDE_DIRECTORIES(${RESOURCED_INCLUDEDIR}
  ${RESOURCED_SOURCE_DIR}
  ${HEART_SOURCE_DIR}/include
  ${MEMORY_SOURCE_DIR}
  ${FREEZER_SOURCE_DIR}/include
  ${PROC-STAT_SOURCE_DIR}/include
  ${APP-STAT_SOURCE_DIR}/include
  ${NETWORK_SOURCE_DIR}/include
  ${BLOCK_SOURCE_DIR}/include
  ${RESOURCED_DBUS_SOURCE_DIR}/include
  )

SET (HEADERS
  ${NETWORK_SOURCE_DIR}/include/datausage-vconf-callbacks.h
  ${NETWORK_SOURCE_DIR}/include/iface-cb.h
  ${FREEZER_SOURCE_DIR}/include/freezer-vconf-callbacks.h
  ${INCLUDE_MEMORY_DIR}/helper.h
)

FILE(GLOB FILE "${INCLUDE_COMMON_DIR}/*.h")
FOREACH(HEADER ${FILE})
	SET(HEADERS ${HEADERS} ${HEADER})
ENDFOREACH()

SET (SOURCES
  ${PROC-STAT_SOURCE_DIR}/proc-handler.c
  ${PROC-STAT_SOURCE_DIR}/proc-main.c
  ${PROC-STAT_SOURCE_DIR}/proc-noti.c
  ${PROC-STAT_SOURCE_DIR}/proc-process.c
  ${PROC-STAT_SOURCE_DIR}/proc-monitor.c
  ${PROC-STAT_SOURCE_DIR}/proc-info.c
  ${PROC-STAT_SOURCE_DIR}/proc-appusage.c
  ${PROC-STAT_SOURCE_DIR}/proc-usage-stats.c
  ${PROC-STAT_SOURCE_DIR}/proc-usage-stats-helper.c
  ${RESOURCED_SOURCE_DIR}/init.c
  ${RESOURCED_SOURCE_DIR}/main.c
  ${MEMORY_SOURCE_DIR}/helper.c
  ${COMMON_SOURCE_DIR}/procfs.c
  )

FILE(GLOB FILE "${COMMON_SOURCE_DIR}/*.c")
FOREACH(SOURCE ${FILE})
	SET(SOURCES ${SOURCES} ${SOURCE})
ENDFOREACH()

INSTALL(FILES ${DATA_DIR}/${EXCLUDE_LIST_FILE_NAME} DESTINATION /usr/etc)
#network module
IF("${NETWORK_MODULE}" STREQUAL "ON")
  SET(SOURCES ${SOURCES}
    ${NETWORK_SOURCE_DIR}/counter.c
  )
  IF("${DATAUSAGE_TYPE}" STREQUAL "NFACCT")
    SET(CONFIG_DATAUSAGE_NFACCT 1)
    SET(SOURCES ${SOURCES}
      ${NETWORK_SOURCE_DIR}/nfacct-rule.c
      ${NETWORK_SOURCE_DIR}/nf-restriction.c
    )
  ELSE()
    SET(SOURCES ${SOURCES}
      ${NETWORK_SOURCE_DIR}/generic-netlink.c
      ${NETWORK_SOURCE_DIR}/ktgrabber-restriction.c
      ${NETWORK_SOURCE_DIR}/ktgrabber-parser.c
    )
  ENDIF()

  IF("${WEARABLE_NOTI}" STREQUAL "ON")
    SET(SOURCES ${SOURCES}
      ${NETWORK_SOURCE_DIR}/notification-wearable.c
    )
  ELSE()
    SET(SOURCES ${SOURCES}
      ${NETWORK_SOURCE_DIR}/notification-mobile.c
    )
  ENDIF()

  SET(SOURCES ${SOURCES}
    ${NETWORK_SOURCE_DIR}/counter-process.c
    ${NETWORK_SOURCE_DIR}/options-private.c
    ${NETWORK_SOURCE_DIR}/datausage-quota-processing.c
    ${NETWORK_SOURCE_DIR}/datausage-vconf-callbacks.c
    ${NETWORK_SOURCE_DIR}/datausage-vconf-common.c
    ${NETWORK_SOURCE_DIR}/specific-trace.c
    ${NETWORK_SOURCE_DIR}/datausage-common.c
    ${NETWORK_SOURCE_DIR}/iface-cb.c
    ${NETWORK_SOURCE_DIR}/nl-helper.c
    ${NETWORK_SOURCE_DIR}/restriction-handler.c
    ${NETWORK_SOURCE_DIR}/restriction-helper.c
    ${NETWORK_SOURCE_DIR}/restriction-local.c
    ${NETWORK_SOURCE_DIR}/tethering-restriction.c
    ${NETWORK_SOURCE_DIR}/db-guard.c
    )

   INSTALL(FILES ${NETWORK_SOURCE_DIR}/network.conf
		DESTINATION /etc/resourced)
   INSTALL(FILES ${NETWORK_SOURCE_DIR}/500.resourced-datausage.patch.sh
                 DESTINATION /etc/opt/upgrade)

   SET (REQUIRES_LIST ${REQUIRES_LIST}
	openssl
	tapi
   )


ENDIF()

#freezer module
IF("${FREEZER_MODULE}" STREQUAL "ON")
  SET(SOURCES ${SOURCES}
    ${FREEZER_SOURCE_DIR}/freezer-cgroup.c
    ${FREEZER_SOURCE_DIR}/freezer-process.c
    ${FREEZER_SOURCE_DIR}/freezer-vconf-callbacks.c
    ${FREEZER_SOURCE_DIR}/freezer.c
    )
ENDIF()

#resourced DBus module
SET(SOURCES ${SOURCES}
  ${RESOURCED_DBUS_SOURCE_DIR}/resourced-dbus.c
  )

IF("${VIP_AGENT}" STREQUAL "ON")
  SET(SOURCES ${SOURCES}
     ${VIP_SOURCE_DIR}/vip-process.c
    )
ENDIF()

#heart module
IF("${HEART_MODULE}" STREQUAL "ON")
  SET(SOURCES ${SOURCES}
    ${HEART_SOURCE_DIR}/heart.c
    ${HEART_SOURCE_DIR}/heart-cpu.c
    ${HEART_SOURCE_DIR}/heart-memory.c
    ${HEART_SOURCE_DIR}/heart-battery.c
    ${HEART_SOURCE_DIR}/logging.c
    ${HEART_SOURCE_DIR}/logging-cpu.c
    ${HEART_SOURCE_DIR}/logging-memory.c
    ${HEART_SOURCE_DIR}/logging-battery.c
    ${HEART_SOURCE_DIR}/logging-export.c
    ${HEART_SOURCE_DIR}/logging-storage.c
    ${HEART_SOURCE_DIR}/decision.c
    ${HEART_SOURCE_DIR}/decision-memory.c
    )
  ADD_DEFINITIONS("-DHEART_SUPPORT")
ENDIF()

#memory module
IF("${MEMORY_MODULE}" STREQUAL "ON")
  SET(SOURCES ${SOURCES}
    ${MEMORY_SOURCE_DIR}/lowmem-dbus.c
    ${MEMORY_SOURCE_DIR}/memcontrol.c
  )
  IF("${MEMORY_VMPRESSURE}" STREQUAL "ON")
    SET(SOURCES ${SOURCES} ${MEMORY_SOURCE_DIR}/vmpressure-lowmem-handler.c)
    ADD_DEFINITIONS("-DVMPRESURE_LOWMEM")
  ELSE()
    SET(SOURCES ${SOURCES} ${MEMORY_SOURCE_DIR}/lowmem-handler.c)
  ENDIF()
  ADD_DEFINITIONS("-DMEMORY_SUPPORT")
ENDIF()

#swap module
IF("${SWAP_MODULE}" STREQUAL "ON")
  SET(SOURCES ${SOURCES}
    ${SWAP_SOURCE_DIR}/swap.c
    )
  ADD_DEFINITIONS("-DSWAP_SUPPORT")
ENDIF()

IF("${CPU_MODULE}" STREQUAL "ON")
  SET(SOURCES ${SOURCES}
    ${CPU_SOURCE_DIR}/cpu.c
    )
ENDIF()

IF("${TIMER_SLACK}" STREQUAL "ON")
  SET(SOURCES ${SOURCES}
    ${TIMER_SOURCE_DIR}/timer-slack.c
    )
ENDIF()

IF("${BLOCK_MODULE}" STREQUAL "ON")
  SET(SOURCES ${SOURCES}
     ${BLOCK_SOURCE_DIR}/block.c
     ${BLOCK_SOURCE_DIR}/block-monitor.c
    )
ENDIF()

SET (REQUIRES_LIST ${REQUIRES_LIST}
	ecore
	dlog
	glib-2.0
        sqlite3
	vconf
	vconf-internal-keys
	ecore-file
	eina
	edbus
	libsystemd-daemon
	leveldb
	eventsystem
)

IF("${HEART_MODULE}" STREQUAL "ON")
  SET (REQUIRES_LIST ${REQUIRES_LIST}
	libsystemd-journal
  )
ENDIF()

INCLUDE(FindPkgConfig)
pkg_check_modules(daemon_pkgs REQUIRED ${REQUIRES_LIST})

FOREACH(flag ${daemon_pkgs_CFLAGS})
        SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} ${flag} -pthread")
ENDFOREACH(flag)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_CFLAGS} -fPIE")

CONFIGURE_FILE(${INCLUDE_COMMON_DIR}/config.h.in
  ${INCLUDE_COMMON_DIR}/config.h)

ADD_EXECUTABLE(hashtest ${UTILS_SOURCE_DIR}/hashtest.c)
TARGET_LINK_LIBRARIES(hashtest ${daemon_pkgs_LDFLAGS})

ADD_EXECUTABLE (${PROJECT_NAME} ${HEADERS} ${SOURCES})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
  ${daemon_pkgs_LDFLAGS} "-pie -lrt -lm"
)

IF("${NETWORK_MODULE}" STREQUAL "ON")
  TARGET_LINK_LIBRARIES(${PROJECT_NAME}
    resourced
    app-stat
    storage
    settings
    net-cls
    telephony
    net-iface
  )

  IF("${CMAKE_BUILD_TYPE}" STREQUAL  "DEBUG")
	ADD_EXECUTABLE(test-udp-server ${UTILS_SOURCE_DIR}/udp-server.c ${UTILS_SOURCE_DIR}/udp-common.c)
	ADD_EXECUTABLE(test-udp-client ${UTILS_SOURCE_DIR}/udp-client.c ${UTILS_SOURCE_DIR}/udp-common.c)
  ADD_EXECUTABLE(iface-test ${UTILS_SOURCE_DIR}/iface-test.c)
  TARGET_LINK_LIBRARIES(iface-test net-iface ${daemon_pkgs_LDFLAGS})

  ENDIF()

  INSTALL(FILES ${DATA_DIR}/traffic_db.sql
    DESTINATION /usr/share)
ENDIF()

INSTALL(FILES ${INCLUDE_PUBLIC_DIR}/resourced.h DESTINATION include/system)

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES SKIP_BUILD_RPATH true)
INSTALL(FILES ${PROJECT_NAME}
  DESTINATION ${MAKE_INSTALL_PREFIX}/usr/bin RENAME resourced
  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE WORLD_EXECUTE)

IF("${MEMORY_ENG}" STREQUAL "ON")
  INSTALL(FILES ${MEMORY_SOURCE_DIR}/memory_eng.conf
    DESTINATION /etc/resourced RENAME memory.conf)
ELSE()
  INSTALL(FILES ${MEMORY_SOURCE_DIR}/memory_user.conf
    DESTINATION /etc/resourced RENAME memory.conf)
ENDIF()

IF("${SWAP_MODULE}" STREQUAL "ON")
  INSTALL(FILES ${SWAP_SOURCE_DIR}/swap.conf DESTINATION /etc/resourced)
ENDIF()

IF("${HEART_MODULE}" STREQUAL "ON")
  INSTALL(FILES ${HEART_SOURCE_DIR}/heart.conf
    DESTINATION /etc/resourced RENAME heart.conf)
  INSTALL(FILES ${HEART_SOURCE_DIR}/dump_heart_data.sh
    DESTINATION /opt/etc/dump.d/module.d)
ENDIF()

IF("${CPU_MODULE}" STREQUAL "ON")
  INSTALL(FILES ${CPU_SOURCE_DIR}/cpu.conf
    DESTINATION /etc/resourced RENAME cpu.conf)
ELSE()
  INSTALL(PROGRAMS ${CMAKE_BINARY_DIR}/scripts/resourced-cpucgroup.sh DESTINATION bin)
ENDIF()

IF("${TIMER_SLACK}" STREQUAL "ON")
  INSTALL(FILES ${TIMER_SOURCE_DIR}/timer-slack.conf
    DESTINATION /etc/resourced RENAME timer-slack.conf)
ENDIF()

IF("${VIP_AGENT}" STREQUAL "ON")
ADD_EXECUTABLE(vip-release-agent ${VIP_SOURCE_DIR}/vip-release-agent.c)
TARGET_LINK_LIBRARIES(vip-release-agent dlog)
INSTALL(TARGETS vip-release-agent DESTINATION /usr/bin)
INSTALL(FILES ${VIP_SOURCE_DIR}/vip-process.conf DESTINATION /etc/resourced RENAME vip-process.conf)
ENDIF()

IF("${BLOCK_MODULE}" STREQUAL "ON")
  INSTALL(FILES ${BLOCK_SOURCE_DIR}/block.conf
    DESTINATION /etc/resourced RENAME block.conf)
ENDIF()

IF("${FREEZER_MODULE}" STREQUAL "ON")
  INSTALL(FILES ${FREEZER_SOURCE_DIR}/freezer.conf
    DESTINATION /etc/resourced RENAME freezer.conf)
ENDIF()

INSTALL(FILES ${PROC-STAT_SOURCE_DIR}/proc.conf
    DESTINATION /etc/resourced RENAME proc.conf)

